"""
Django settings for blango project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+sn%dpa!086+g+%44z9*^j^q-u4n!j(#wl)x9a%_1op@zz2+1-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
'''
ALLOWED_HOSTS = ['*']
#X_FRAME_OPTIONS = 'ALLOW-FROM ' + os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io'
CSRF_COOKIE_SAMESITE = None
#CSRF_TRUSTED_ORIGINS = [os.environ.get('CODIO_HOSTNAME') + '-8000.codio.io']
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = 'None'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
'''
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'blango_auth',
    'blog',
    'crispy_forms',
    'crispy_bootstrap5',
    'debug_toolbar',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
]

MIDDLEWARE = [
	"debug_toolbar.middleware.DebugToolbarMiddleware",
	'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    #'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blango.urls'

# Finally we need to add an INTERNAL_IPS setting, to djDT
INTERNAL_IPS = ["127.0.0.1"]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
	"version": 1,
	"disable_existing_loggers": False,
	"filters": {
		"require_debug_false": {
			"()": "django.utils.log.RequireDebugFalse",
		},
	},
	"formatters": {
		"verbose": { "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
		"style": "{",
},
},
	"handlers": {
		"console": {
			"class": "logging.StreamHandler",
			"stream": "ext://sys.stdout",
			"formatter": "verbose",
		},
		"mail_admins": {
			"level": "ERROR",
			"class": "django.utils.log.AdminEmailHandler",
			"filters": ["require_debug_false"],
		},
	},
	"loggers": {
		"django.request": {
			"handlers": ["mail_admins"],
			"level": "ERROR",
			"propagate": True,
		},
	},
	"root": {
	"handlers": ["console"],
	"level": "DEBUG",
	},
}


ADMINS = [("Marco Parra", "maaferna@gmail.com"), ("Leo Lucio",
"leo@example.com")]

PASSWORD_HASHERS = [
'django.contrib.auth.hashers.PBKDF2PasswordHasher',
'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
'django.contrib.auth.hashers.Argon2PasswordHasher',
'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

from django.core.cache import caches

default_cache = caches["default"]


from django.core.cache import cache
# cache is the equivalent of caches["default"]/our default_cache variable




'''
CACHES = {
"default": {
    "BACKEND":
        "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
    }
}
# Filesystem Caching
CACHES = {
	"default": {
		"BACKEND":
		"django.core.cache.backends.filebased.FileBasedCache",
		"LOCATION": "/var/tmp/django_cache",
	}
}

# Local-memory Caching

CACHES = {
	"default": {
		"BACKEND":
		"django.core.cache.backends.locmem.LocMemCache",
		"LOCATION": "unique-snowflake",
}
}

# Dummy Caching

CACHES = {
"default": {
"BACKEND":
"django.core.cache.backends.dummy.DummyCache",
}
}

'''
AUTH_USER_MODEL = "blango_auth.User"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
ACCOUNT_ACTIVATION_DAYS = 7

'''

Next we need to add a setting so the Django knows which Site object our
settings ﬁle applies to. Django will automatically create one when we next
migrate , and we’ll only use this single Site object in Blango. The site will
have the ID 1 so we need to add this setting:

'''
SITE_ID = 1



'''
Normally when Django Allauth creates a User object from a social account
login, it will generate it a username based on the user ID at the third party.
Since our custom User model doesn’t have a username ﬁeld, Django Allauth
will fail, unless we make some settings changes

'''
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"

'''
token authentication set up in Blango
'''

REST_FRAMEWORK = {
"DEFAULT_AUTHENTICATION_CLASSES": [
    "rest_framework.authentication.BasicAuthentication",
    "rest_framework.authentication.SessionAuthentication",
    "rest_framework.authentication.TokenAuthentication",
],
"DEFAULT_PERMISSION_CLASSES": [
    "rest_framework.permissions.IsAuthenticatedOrReadOnly",
],
"DEFAULT_THROTTLE_CLASSES": [
    "blog.api.throttling.AnonSustainedThrottle",
    "blog.api.throttling.AnonBurstThrottle",
    "blog.api.throttling.UserSustainedThrottle",
    "blog.api.throttling.UserBurstThrottle",
],
"DEFAULT_THROTTLE_RATES": {
    "anon_sustained": "500/day",
    "anon_burst": "10/minute",
    "user_sustained": "5000/day",
    "user_burst": "100/minute",
},

}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Token": {"type": "apiKey", "name": "Authorization","in": "header"},
        "Basic": {"type": "basic"},
}
}